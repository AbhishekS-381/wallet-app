/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface NotificationToast {
        /**
          * @default 3000
         */
        "duration": number;
        /**
          * @default ''
         */
        "message": string;
        /**
          * @default 'success'
         */
        "type": 'success' | 'error';
    }
    interface WalletAppRoot {
    }
    interface WalletDashboard {
        "walletId": string;
    }
    interface WalletSetup {
    }
    interface WalletTransactions {
        "walletId": string;
    }
    interface WalletTransactionsTable {
        "walletId": string;
    }
}
export interface WalletDashboardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWalletDashboardElement;
}
export interface WalletSetupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWalletSetupElement;
}
export interface WalletTransactionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWalletTransactionsElement;
}
declare global {
    interface HTMLNotificationToastElement extends Components.NotificationToast, HTMLStencilElement {
    }
    var HTMLNotificationToastElement: {
        prototype: HTMLNotificationToastElement;
        new (): HTMLNotificationToastElement;
    };
    interface HTMLWalletAppRootElement extends Components.WalletAppRoot, HTMLStencilElement {
    }
    var HTMLWalletAppRootElement: {
        prototype: HTMLWalletAppRootElement;
        new (): HTMLWalletAppRootElement;
    };
    interface HTMLWalletDashboardElementEventMap {
        "showTransactions": void;
        "notificationChange": { message: string; type: 'success' | 'error' };
    }
    interface HTMLWalletDashboardElement extends Components.WalletDashboard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWalletDashboardElementEventMap>(type: K, listener: (this: HTMLWalletDashboardElement, ev: WalletDashboardCustomEvent<HTMLWalletDashboardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWalletDashboardElementEventMap>(type: K, listener: (this: HTMLWalletDashboardElement, ev: WalletDashboardCustomEvent<HTMLWalletDashboardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWalletDashboardElement: {
        prototype: HTMLWalletDashboardElement;
        new (): HTMLWalletDashboardElement;
    };
    interface HTMLWalletSetupElementEventMap {
        "walletCreated": { walletId: string };
        "notificationChange": { message: string; type: 'success' | 'error' };
    }
    interface HTMLWalletSetupElement extends Components.WalletSetup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWalletSetupElementEventMap>(type: K, listener: (this: HTMLWalletSetupElement, ev: WalletSetupCustomEvent<HTMLWalletSetupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWalletSetupElementEventMap>(type: K, listener: (this: HTMLWalletSetupElement, ev: WalletSetupCustomEvent<HTMLWalletSetupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWalletSetupElement: {
        prototype: HTMLWalletSetupElement;
        new (): HTMLWalletSetupElement;
    };
    interface HTMLWalletTransactionsElementEventMap {
        "back": void;
        "notificationChange": { message: string; type: 'success' | 'error' };
    }
    interface HTMLWalletTransactionsElement extends Components.WalletTransactions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWalletTransactionsElementEventMap>(type: K, listener: (this: HTMLWalletTransactionsElement, ev: WalletTransactionsCustomEvent<HTMLWalletTransactionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWalletTransactionsElementEventMap>(type: K, listener: (this: HTMLWalletTransactionsElement, ev: WalletTransactionsCustomEvent<HTMLWalletTransactionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWalletTransactionsElement: {
        prototype: HTMLWalletTransactionsElement;
        new (): HTMLWalletTransactionsElement;
    };
    interface HTMLWalletTransactionsTableElement extends Components.WalletTransactionsTable, HTMLStencilElement {
    }
    var HTMLWalletTransactionsTableElement: {
        prototype: HTMLWalletTransactionsTableElement;
        new (): HTMLWalletTransactionsTableElement;
    };
    interface HTMLElementTagNameMap {
        "notification-toast": HTMLNotificationToastElement;
        "wallet-app-root": HTMLWalletAppRootElement;
        "wallet-dashboard": HTMLWalletDashboardElement;
        "wallet-setup": HTMLWalletSetupElement;
        "wallet-transactions": HTMLWalletTransactionsElement;
        "wallet-transactions-table": HTMLWalletTransactionsTableElement;
    }
}
declare namespace LocalJSX {
    interface NotificationToast {
        /**
          * @default 3000
         */
        "duration"?: number;
        /**
          * @default ''
         */
        "message"?: string;
        /**
          * @default 'success'
         */
        "type"?: 'success' | 'error';
    }
    interface WalletAppRoot {
    }
    interface WalletDashboard {
        "onNotificationChange"?: (event: WalletDashboardCustomEvent<{ message: string; type: 'success' | 'error' }>) => void;
        "onShowTransactions"?: (event: WalletDashboardCustomEvent<void>) => void;
        "walletId"?: string;
    }
    interface WalletSetup {
        "onNotificationChange"?: (event: WalletSetupCustomEvent<{ message: string; type: 'success' | 'error' }>) => void;
        "onWalletCreated"?: (event: WalletSetupCustomEvent<{ walletId: string }>) => void;
    }
    interface WalletTransactions {
        "onBack"?: (event: WalletTransactionsCustomEvent<void>) => void;
        "onNotificationChange"?: (event: WalletTransactionsCustomEvent<{ message: string; type: 'success' | 'error' }>) => void;
        "walletId"?: string;
    }
    interface WalletTransactionsTable {
        "walletId"?: string;
    }
    interface IntrinsicElements {
        "notification-toast": NotificationToast;
        "wallet-app-root": WalletAppRoot;
        "wallet-dashboard": WalletDashboard;
        "wallet-setup": WalletSetup;
        "wallet-transactions": WalletTransactions;
        "wallet-transactions-table": WalletTransactionsTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "notification-toast": LocalJSX.NotificationToast & JSXBase.HTMLAttributes<HTMLNotificationToastElement>;
            "wallet-app-root": LocalJSX.WalletAppRoot & JSXBase.HTMLAttributes<HTMLWalletAppRootElement>;
            "wallet-dashboard": LocalJSX.WalletDashboard & JSXBase.HTMLAttributes<HTMLWalletDashboardElement>;
            "wallet-setup": LocalJSX.WalletSetup & JSXBase.HTMLAttributes<HTMLWalletSetupElement>;
            "wallet-transactions": LocalJSX.WalletTransactions & JSXBase.HTMLAttributes<HTMLWalletTransactionsElement>;
            "wallet-transactions-table": LocalJSX.WalletTransactionsTable & JSXBase.HTMLAttributes<HTMLWalletTransactionsTableElement>;
        }
    }
}
